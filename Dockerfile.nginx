# Use Node.js v20 as the base image
FROM node:20-alpine AS builder

# Build arguments
ARG NEXT_PUBLIC_VAULT_ADDRESSES
ARG NEXT_PUBLIC_ENVIRONMENT
ARG NEXT_PUBLIC_RPC_URL_MAINNET
ARG NEXT_PUBLIC_RPC_URL_SEPOLIA
ARG NEXT_PUBLIC_WS_URL
ARG FOSSIL_API_KEY
ARG FOSSIL_DB_URL
ARG NEXT_PUBLIC_FOSSIL_API_URL
# ARG APPLICATION_PASSWORD

# Environment variables
ENV NEXT_PUBLIC_VAULT_ADDRESSES=${NEXT_PUBLIC_VAULT_ADDRESSES}
ENV NEXT_PUBLIC_ENVIRONMENT=${NEXT_PUBLIC_ENVIRONMENT}
ENV NEXT_PUBLIC_RPC_URL_MAINNET=${NEXT_PUBLIC_RPC_URL_MAINNET}
ENV NEXT_PUBLIC_RPC_URL_SEPOLIA=${NEXT_PUBLIC_RPC_URL_SEPOLIA}
ENV NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
ENV FOSSIL_API_KEY=${FOSSIL_API_KEY}
ENV FOSSIL_DB_URL=${FOSSIL_DB_URL}
ENV NEXT_PUBLIC_FOSSIL_API_URL=${NEXT_PUBLIC_FOSSIL_API_URL}

# Set the working directory
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files first
COPY package.json pnpm-lock.yaml* ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy the rest of the application
COPY . .

# Build the Next.js application
RUN pnpm run build

# Production image
FROM node:20-alpine AS runner

# Install required packages
RUN apk add --no-cache nginx apache2-utils && rm -rf /var/lib/apt/lists/* \
    npm install -g pnpm

# Set the working directory
WORKDIR /app

# Copy necessary files from the builder
COPY --from=builder /app/package.json .
COPY --from=builder /app/pnpm-lock.yaml* .
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules

# Copy the Nginx configuration file
COPY nginx.conf /etc/nginx/nginx.conf

# Create the .htpasswd file using APPLICATION_PASSWORD
# RUN htpasswd -bc /etc/nginx/.htpasswd code-audit Test@12

# Copy the .htpasswd file for basic auth
COPY .htpasswd /etc/nginx/.htpasswd

# Expose the ports
EXPOSE 80

# Start the application and Nginx
CMD pnpm start --port 3000 & nginx -g 'daemon off;'
